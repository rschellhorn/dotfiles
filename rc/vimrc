
" This vimrc automatically installs everything it needs.
" To install, or reinstall, remove ~/.vim directory and open Vim.

if &compatible
endif

filetype off

let needsToInstallPlugins=0
if !filereadable(expand("~/.vim/autoload/plug.vim"))
  echo "\nInstalling Vim dependencies... Please be patient!\n"
  silent !mkdir -p ~/.vim/tmp
  silent !mkdir -p ~/.vim/swap
  silent !mkdir -p ~/.vim/undo
  silent !mkfifo ~/.vim/commands-fifo
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  let needsToInstallPlugins=1
endif

call plug#begin('~/.vim/plugged')

Plug 'w0rp/ale'                           " Async Linter Engine
Plug 'adelarsq/vim-matchit'               " % jumps between do/end etc
Plug 'csexton/trailertrash.vim'           " hate trailing whitespace
Plug 'itchyny/lightline.vim'              " fancy statusbar
Plug 'godlygeek/tabular'                  " vertically align stuff
Plug 'janko-m/vim-test'                   " quickly run tests in terminal
Plug 'justinmk/vim-dirvish'               " netrw replacer
Plug 'jlanzarotta/bufexplorer'            " lists open bufffers like netrw
Plug 'kien/ctrlp.vim'                     " fuzzy search files
Plug 'luochen1990/rainbow'                " rainbow parenthesis
Plug 'michaeljsmith/vim-indent-object'    " defines textobjects based on indent-level
Plug 'mileszs/ack.vim'                    " search contents of files with ack or ag
Plug 'sheerun/vim-polyglot'               " contains a ton of syntax plugins
Plug 'tomtom/tcomment_vim'                " quickly comment/uncomment code

Plug 'tpope/vim-eunuch'                   " unix commands like :Move
Plug 'tpope/vim-fugitive'                 " git integration
Plug 'tpope/vim-rails'                    " rails integration
Plug 'tpope/vim-rhubarb'                  " open file in github.com
Plug 'tpope/vim-sensible'                 " sensible defaults
Plug 'tpope/vim-unimpaired'               " handy toggles
Plug 'tpope/vim-repeat'                   " improved repeat button .
Plug 'tpope/vim-surround'                 " quickly change quotes/parens

Plug 'nanotech/jellybeans.vim' " colorscheme
" Plug 'twerth/ir_black'       " old colorscheme
" Plug 'fenetikm/falcon'
" Plug 'dracula/vim', { 'as': 'dracula' }

call plug#end()

if needsToInstallPlugins == 1
  echo "\nInstalling plugins.\n"
  :PlugInstall
  echo "\nInstalled.\n"
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:dirvish_mode = ':sort ,^.*[\/],'
" autocmd FileType dirvish silent keeppatterns g@\v/\.[^\/]+/?$@d _
autocmd FileType dirvish silent set nocursorline

augroup my_dirvish_events
  autocmd!

  autocmd FileType dirvish map <buffer> % :edit <C-R>=expand('%:h').'/'<cr>
  autocmd FileType dirvish map <buffer> d :!mkdir -p <C-R>=expand('%:h').'/'<cr>
  autocmd FileType dirvish map <buffer> D :!rm -r <C-R>=expand('<cfile>')<cr>
  autocmd FileType dirvish map <buffer> r :!mv <C-R>=expand('<cfile>')<cr> <C-R>=expand('<cfile>')<cr>

  " autocmd FileType dirvish silent keeppatterns g@\v/\.[^\/]+/?$@d _

augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ==========================
" SETTINGS
" ==========================

filetype plugin indent on

if has("gui_macvim")
  set antialias                      " Pretty
  set guioptions=Ace                 " No menubar, toolbar or scrollbars, as minimal as possible
  set guifont=Dejavu\ Sans\ Mono:h16 " Get Dejavu Sans mono here: http://dejavu-fonts.org/
  set clipboard=unnamed              " Copy-paste just works
  set fuoptions=maxvert,maxhorz      " Fixes Full Screen on OSX
  " If you are on OSX Lion, and you hate Lion's native full screen, turn it off for macvim:
  "   defaults write org.vim.MacVim MMNativeFullScreen 0
  " Press Ctrl+Cmd+F to go full screen
end


set vb t_vb=               " Turn off beep
set lazyredraw             " Don't redraw during macro execution
set synmaxcol=512          " Stop syntax highlighting for long lines
" set relativenumber         " Relative line numbering
set number                 " Relative line numbering
set nowrap                 " No wrapping by default
set scrolloff=4            " Keep a few lines above and below current line
set equalalways            " create equally sized splits
set splitbelow splitright  " split placement
set wildmode=longest,list  " Makes completion in command mode like bash
set history=10000          " Keep a lot of stuff in history
set backup                 " Make backups
set backupdir=~/.vim/tmp/  " Keep backups in a central location
set directory=~/.vim/swap/ " Keep swap files in a central location
set undofile               " Keep undo history even after closing Vim
set undodir=~/.vim/undo    " Where to store undo history
set timeoutlen=500         " Don't wait so long for ambiguous leader keys
set noesckeys              " Get rid of the delay when hitting esc!
set gdefault               " assume the /g flag on :s substitutions to replace all matches in a line
set nocompatible

" Indenting always 2 spaces, sorry Python
set cindent
set expandtab
set shiftwidth=2
set smartindent
set softtabstop=2
set tabstop=2

set wildignore+=.DS_Store

" Search
set smartcase
set hlsearch

" Markdown
let g:vim_markdown_folding_disabled = 1

" Ruby
let ruby_no_expensive = 1 " Differentiate between do..end and class..end is slow
let ruby_operators = 1    " Highlight Ruby operators

" Vim-test
let test#strategy = 'vimterminal'
let test#ruby#rspec#executable = 'FAST=1 DISABLE_SPRING=1 bin/rspec'
let test#ruby#rspec#options = {
      \ 'nearest': '--backtrace',
      \ 'file':    '--format documentation'
      \ }

" Others
let g:ackprg = 'ag --nogroup --nocolor --column'
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

let g:ale_set_highlights = 0
let g:ale_sign_error   = ' •' " has U+2009 as space
let g:ale_sign_warning = ' •'
let g:ale_sign_column_always = 1
hi link ALEErrorSign    Error
hi link ALEWarningSign  Warning
hi Error   cterm=bold gui=bold guibg=#151515 guifg=DarkRed
hi Warning cterm=bold gui=bold

set formatprg=par\ -w80\ -q

" ==========================
" AUTOCOMMANDS
" ==========================

" When editing a file, always jump to the last known cursor position.
autocmd BufReadPost *
      \ if line("'\"") > 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif

" Format xml files
au FileType xml exe ":silent 1,$!xmllint --format --recover - 2>/dev/null"

" Add rainbows and unicorns
let g:rainbow_active = 1

" ==========================
" GENERAL KEY MAPPINGS
" ==========================

" Rename :W to :w
command! W :w

" Use OSX pbpaste/pbcopy for F1/F2, for use in terminal
nmap <F1> :set paste<cr>:r !pbpaste<cr>:set nopaste<cr>
imap <F1> <Esc>:set paste<cr>:r !pbpaste<cr>:set nopaste<cr>
nmap <F2> :.w !pbcopy<cr><cr>
vmap <F2> :w !pbcopy<cr><cr>

" in insert mode, jj goes to normal mode
" if you ever need to type jj for real, type it slowly, like on old school mobile phones
" inoremap jj <ESC>

" Directly switch between open splitted windows
map <C-J> <C-W>j
map <C-H> <C-W>h
map <C-L> <C-W>l
map <C-K> <C-W>k

" pressing j or k in a long wrapped will put cursor down/up one visual line
nnoremap j gj
nnoremap k gk

" Shift+K becomes similar to Shift+J
nnoremap <S-k> kJ

" Remap return to clear search highlight
nnoremap <cr> :nohlsearch<cr>

" highlight the 100th character
" highlight ColorColumn ctermbg=magenta
" call matchadd('ColorColumn', '\%81v', 100)

" In normal mode, space will start command mode.
nnoremap <space> :
vnoremap <space> :

" Buffer Explorer opens with Ctrl+B
nnoremap <C-B> :BufExplorer<cr>

" %% will become the directory of the current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" Hooks up smart tab autocomplete behavior mentioned above
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" A common typo is ":E" when actually meaning ":e" and not ":Explore" or
" ":Errors".
cnoreabbrev E e


" Insert hex keys
inoremap <silent> <F12> <ESC>:r ! ruby -r securerandom -e "print SecureRandom.hex(32)"<CR>kJ

" ==========================
" LEADER KEYS
" ==========================

let mapleader = ","

" Map ,e and ,v to open files in the same directory as the current file
map <leader>e :edit %%
map <leader>v :view %%
map <leader>m :vsplit %%
map <leader>n :split %%

" Testing
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>f :TestFile<CR>
nmap <silent> <leader>s :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

" Custom functions
map <leader>p :call PromoteToLet()<cr>

" Align = signs
nmap <Leader>a= :Tabularize /=<cr>
vmap <Leader>a= :Tabularize /=<cr>gv
" Align hashrockets
nmap <Leader>a> :Tabularize /=><cr>
vmap <Leader>a> :Tabularize /=><cr>gv
" Align commas
nmap <Leader>a, :Tabularize /,\zs/l0r1<cr>
vmap <Leader>a, :Tabularize /,\zs/l0r1<cr>gv
" Align words and fix indentation
nmap <Leader>aw :Tabularize /\s\+\zs/l1<cr>=ip
vmap <Leader>aw :Tabularize /\s\+\zs/l1<cr>gv=gv
" Align comments
nmap <Leader>ac :Tabularize /#<cr>
" Align blocks
nmap <Leader>a{ :Tabularize /{<cr>
vmap <Leader>a{ :Tabularize /{<cr>gv
vmap <Leader>a{ :Tabularize /{<cr>gv
" Align from
nmap <Leader>af :Tabularize /from<cr>
vmap <Leader>af :Tabularize /from<cr>gv

" Fugitive (Git)
map <Leader><Leader>c :Gcommit<cr>
map <Leader><Leader>b :Gblame<cr>
map <Leader><Leader>s :Gstatus<cr>
map <Leader><Leader>w :Gwrite<cr>
map <Leader><Leader>l :Git l<cr>
map <Leader><Leader>p :Git push<cr>
map <Leader><Leader>f :Git fetch<cr>
map <Leader><Leader>u :Git up<cr>

" Open notes file
" map <Leader>q :split ~/Dropbox/notes.md<cr>



" ==========================
" FUNCTIONS
" ==========================

" Smart tab autocomplete behavior
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction

" Convert local variable to RSpec let block
function! PromoteToLet()
  :normal! dd
  :exec '?^\s*describe\|context\|RSpec\.describe\>'
  :normal! p
  :.s/\(\w\+\)\s\+=\s\+\(.*\)$/let(:\1) { \2 }/
  :normal ==
endfunction

" Aligns tables in cucumber, from tim pope: https://gist.github.com/tpope/287147
function! s:AlignCucumberTables()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

" Only enable in cucumber
function! EnableCucumberTables()
  inoremap <silent> <Bar>   <Bar><Esc>:call <SID>AlignCucumberTables()<cr>a
endfunction
au FileType cucumber call EnableCucumberTables()

" Automatically align multiline hashes in Ruby (Ruby 1.9 syntax only).
function! AlignRubyHashes()
  " Only look for lines that start with a simple keyword, colon, space, and
  " ending in a comma.
  let p = '^\s*\w\+:\s.*,$'

  " Don't do anything if there is no Tabularize, or there is no surrounding
  " line that can be aligned with.
  if exists(':Tabularize') && (getline(line('.')) =~# '^\s*\w\+:\s$') && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    " save current position because later command moves the cursor
    let currentLine = line(".")
    let currentCol = col(".")

    call DoAlignRubyHashes()

    " Since the current line cannot be aligned yet when it is too short, find
    " a line to compare it with. This is either the previous line or the next
    " line.
    if (getline(currentLine-1) =~ p)
      let compareLine = currentLine - 1
    else
      let compareLine = currentLine + 1
    endif

    " Calculate how many spaces to add.
    let positionOfValues = strlen(matchstr(getline(compareLine), '^.*:\s\+'))
    let missingSpaces = (positionOfValues - currentCol) + 1

    " Add missing spaces
    if missingSpaces > 0
      exe currentLine.'s/$/'.repeat(' ', missingSpaces)
    endif

    " Set the cursor to the proper position
    call cursor(currentLine, currentCol + missingSpaces)

  endif
endfunction

function! DoAlignRubyHashes()
  let p = '^\s*\w\+:\s.*,$'

  " Calculate the range to act. Default Tabularize doesn't do this properly,
  " because the range is determined by a different regex than the alignment
  " regex.
  let from = line('.')
  while (getline(from - 1) =~ p)
    let from -= 1
  endwhile

  let to = line('.')
  while (getline(to + 1) =~ p)
    let to += 1
  endwhile

  " Call Tabularize with the new range
  exe from.','.to.'Tabularize/\(:.*\)\@<!\(:\s\)\zs/l0r1'
  normal! 0

endfunction

" Align after colons, but only the first one in the line,
" In normal mode, determine range automatically
nmap <Leader>a: :call DoAlignRubyHashes()<cr>
" In visual mode, the range is already fixed
vmap <Leader>a: :Tabularize/\(:.*\)\@<!:\zs/l1<cr>gv

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Jellybean Colorscheme
"
let g:jellybeans_use_gui_italics = 0
let g:jellybeans_overrides = { 'SignColumn': { 'guibg': '000000' } }
let g:jellybeans_background_color = '000000'
colorscheme jellybeans

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Status line configuration (using lightline)
"
set laststatus=2
set noshowmode
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'mode_map': { 'c': 'NORMAL' },
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'filename' ] ],
      \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'modified': 'LightlineModified',
      \   'readonly': 'LightlineReadonly',
      \   'fugitive': 'LightlineFugitive',
      \   'filename': 'LightlineFilename',
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'fileencoding': 'LightlineFileencoding',
      \   'mode': 'LightlineMode',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'ale#statusline#Count',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }

function! LightlineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '' : ''
endfunction

" \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? @% : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
    let branch = fugitive#head()
    return branch !=# '' ? ' '.branch : ''
  endif
  return ''
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
